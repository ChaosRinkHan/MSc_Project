install.packages(c("AER", "AICcmodavg", "Amelia", "BB"))
install.packages(c("BH", "BIFIEsurvey", "BMA", "BatchJobs", "BayesX", "BiocManager", "BradleyTerry2", "C50", "CDM", "Cairo", "Ckmeans.1d.dp", "Cubist", "DBI", "DBItest", "DT", "DescTools", "DiagrammeR", "DoE.base", "Ecdat", "Ecfun", "ElemStatLearn", "Epi", "EpiModel", "ExPosition", "FNN", "FactoMineR", "FrF2", "GA", "GDINA", "GPareto", "GPfit", "Hmisc", "ISOcodes", "JuliaCall", "KernSmooth", "Lahman", "LogicReg", "MASS", "MBESS", "MCMCglmm", "MEMSS", "MPV", "Matrix", "ModelMetrics", "MuMIn", "OceanView", "PBSmapping", "PMA", "ParamHelpers", "PerformanceAnalytics", "R.devices", "R.oo", "R.rsp", "R.utils", "R6", "RANN", "RCurl", "RGtk2", "RJSONIO", "RMySQL", "RODBC", "RPostgres", "RRF", "RSNNS", "RSQLite", "RSpectra", "RWeka", "RandomFields", "RandomFieldsUtils", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "Rglpk", "Rmpfr", "Rserve", "Runuran", "SimComp", "SimDesign", "Sleuth2", "SnowballC", "SparseM", "StanHeaders", "SuppDists", "SwarmSVM", "TAM", "TH.data", "TMB", "TSP", "TTR", "VGAM", "VIM", "VineCopula", "Zelig", "actuar", "ade4TkGUI", "adehabitatLT", "adehabitatMA", "agricolae", "alphahull", "analogsea", "ape", "aplpack", "arules", "arulesViz", "assertthat", "av", "aws.s3", "batchtools", "bayesplot", "bbmle", "bdsmatrix", "benchr", "betareg", "bibtex", "bigmemory", "bit", "blob", "bookdown", "boot", "brglm", "brms", "brnn", "broom", "bst", "btergm", "caTools", "cairoDevice", "callr", "car", "carData", "caret", "cartogram", "cba", "checkmate", "chron", "circlize", "class", "classInt", "cli", "clipr", "clubSandwich", "clue", "cluster", "clusterSEs", "clusterSim", "cmprsk", "coda", "codetools", "coin", "colorspace", "copula", "covr", "cowplot", "coxme", "crs", "cubature", "curl", "data.table", "data.tree", "ddalpha", "deSolve", "deldir", "dendextend", "diffusionMap", "digest", "dimRed", "diveMove", "doParallel", "dplyr", "dtw", "dynlm", "e1071", "earth", "effects", "egg", "eiPack", "emdbook", "emmeans", "energy", "ergm", "ergm.count", "ergm.ego", "ergm.rank", "ergm.userterms", "evaluate", "evtree", "expm", "extraDistr", "fGarch", "fansi", "fastICA", "fda.usc", "feather", "fftw", "fields", "filehash", "fitdistrplus", "flare", "flexmix", "foghorn", "forcats", "foreach", "forecast", "foreign", "formatR", "fpc", "frbs", "fs", "future", "future.apply", "future.batchtools", "gam", "gamair", "gamlss", "gamlss.data", "gamlss.dist", "gbm", "gclus", "gdtools", "gee", "geepack", "geoR", "geometry", "geosphere", "ggformula", "ggplot2", "ggraph", "ggrepel", "ggridges", "ggstance", "ggthemes", "gistr", "git2r", "glasso", "glmertree", "glmmML", "glmmTMB", "glmnetUtils", "glue", "gmailr", "gmm", "gmp", "googleVis", "gower", "gplots", "gridGraphics", "gsl", "gstat", "gtable", "gutenbergr", "h2o", "haven", "hdi", "heatmaply", "hexbin", "highcharter", "highr", "hms", "hoa", "hrbrthemes", "htmltools", "htmlwidgets", "httpuv", "httr", "huge", "igraph", "inlinedocs", "intsvy", "ipred", "irace", "irlba", "irr", "iterators", "jomo", "jpeg", "kableExtra", "kangar00", "keras", "kernlab", "kinship2", "knitcitations", "kohonen", "ks", "laGP", "labelled", "later", "lattice", "lava", "lavaan", "lazyeval", "lbfgsb3", "lcopula", "leaflet", "lfe", "lhs", "libcoin", "lintr", "listenv", "listviewer", "lme4", "lmerTest", "lmtest", "logspline", "loo", "lpSolve", "lwgeom", "mRMRe", "magick", "maptools", "mapview", "markdown", "matrixStats", "maxLik", "maxlike", "mclust", "mediation", "memisc", "metafor", "mets", "mev", "mgcv", "mice", "miceadds", "micemd", "microbenchmark", "mime", "mirt", "mirtCAT", "miscTools", "missMDA", "mitml", "mitools", "mldr", "mldr.datasets", "mlmRev", "mlogit", "mlr", "mlrMBO", "mockery", "modelr", "mosaic", "mstate", "muhaz", "multcomp", "multcompView", "mvtnorm", "nanotime", "ncdf4", "ndtv", "neighbr", "network", "networkDynamic", "neuralnet", "nlme", "nlreg", "nor1mix", "numDeriv", "nycflights13", "odbc", "optmatch", "ordinal", "osmdata", "pROC", "pamr", "parallelMap", "party", "partykit", "pbapply", "pder", "pdftools", "pec", "permute", "pillar", "pingr", "pkgKitten", "pkgbuild", "pkgconfig", "pkgdown", "plm", "plot3D", "plotlyGeoAssets", "plotmo", "plotrix", "pls", "plyr", "pmml", "pmmlTransformations", "polyclip", "polycor", "polynom", "pool", "popEpi", "pre", "prettyR", "prettycode", "prettydoc", "processx", "prodlim", "profileModel", "progress", "promises", "proxy", "psych", "purrr", "pvclust", "qrng", "quadprog", "quanteda", "quantmod", "quantreg", "qvcalc", "rJava", "randomForestSRC", "randtoolbox", "ranger", "raster", "rasterVis", "rattle", "readxl", "recipes", "refund", "registry", "relations", "remotes", "reticulate", "rgdal", "rgenoud", "rgeos", "rgl", "rhub", "riskRegression", "rjags", "rlang", "rlecuyer", "rmarkdown", "rms", "rngtools", "robust", "robustbase", "roxygen2", "rpart", "rpart.plot", "rrcov", "rsample", "rsconnect", "rstan", "rstanarm", "rstantools", "rstudioapi", "rsvd", "rticles", "rugarch", "rversions", "rvest", "sampleSelection", "sandwich", "scales", "scalreg", "seriation", "servr", "sf", "sfsmisc", "shiny", "shinyAce", "shinyWidgets", "shinydashboardPlus", "showtext", "sirt", "sjPlot", "sjlabelled", "sjstats", "slam", "sn", "sna", "sp", "spData", "spam", "spam64", "sparklyr", "spatstat", "spatstat.utils", "spdep", "spelling", "spls", "stars", "statmod", "statnet", "statnet.common", "stm", "stopwords", "stringi", "stringr", "strucchange", "styler", "survey", "survival", "svglite", "systemfit", "tables", "tensorflow", "tergm", "tesseract", "testit", "testthat", "tibble", "tidyr", "tidytext", "tidyverse", "tikzDevice", "timereg", "tinytex", "tis", "tm", "tmap", "topicmodels", "triangle", "trust", "tseries", "tsna", "tufte", "umap", "usethis", "varImp", "vcd", "vdiffr", "vegan", "vip", "visNetwork", "wavelets", "waveslim", "webp", "webshot", "webutils", "whisker", "whoami", "xfun", "xgboost", "xtable", "zoo"))
install.packages(c("BH", "BIFIEsurvey", "BMA"))
x = 1:10
x = as.data.frame(x)
View(x)
his_g = as.data.frame(x)
x = 1:10
his_g = as.data.frame(x)
library(ggplot2)
x = rnorm(10, 0, 1)
quantile(x, 0.75)
pnorm(0.75, 0, 1)
qnorm(0.75, 0, 1)
x = rnorm(1000, 0, 1)
plot(x)
quantile(x, 0.75)
qnorm(0.75, 0, 1)
pnorm(1.96, 0, 1)
rpois(150, 20)
mle = []
mle = c()
for (i in seq(1,5000)) {
x = rpois(150, 20)
mle[i] = mean(x)
}
summary(mle)
var(mle)
hist(mle,xlab=expression(hat(lambda)),freq=FALSE)
lines(z,dnorm(z, 20, sqrt(0.134)),col=4)
z = seq(18,22,length=1000)
lines(z,dnorm(z, 20, sqrt(0.134)),col=4)
mle = as.data.frame(mle)
View(mle)
mle$legend = (mle$mle-18)%0.1
mle$legend = mod((mle$mle-18),0.1)
mle$legend = (mle$mle-18)%%0.1
mle$legend = floor((mle$mle-18)/0.1)
ggplot(mle, aes(x= legend))+
geom_bar(stat = "count")
library(ggplot2)
ggplot(mle, aes(x= legend))+
geom_bar(stat = "count")
summary(mle)
var(mle)
levels(mle$legend)
levels(as.factor(mle$legend))
dnorm(8, 20, sqrt(0.134))
dnorm(20, 20, sqrt(0.134))
mle$legend = floor((mle$mle-18)/0.25)
ggplot(mle, aes(x= legend))+
geom_bar(stat = "count")
mle$legend = floor((mle$mle-18)/0.22)
ggplot(mle, aes(x= legend))+
geom_bar(stat = "count")
mle$legend = floor((mle$mle-18)/0.20)
ggplot(mle, aes(x= legend))+
geom_bar(stat = "count")
data =
levels(as.factor(mle$legend))
data = as.data.frame(levels(as.factor(mle$legend)))
View(data)
data$cnt = subset(data, data$`levels(as.factor(mle$legend))` == i)
data$cnt[i] = subset(data, data$`levels(as.factor(mle$legend))` == i)
subset(data, data$`levels(as.factor(mle$legend))` == 8
subset(data, data$`levels(as.factor(mle$legend))` == 8
subset(data, data$`levels(as.factor(mle$legend))` == 8)
subset(data, data$`levels(as.factor(mle$legend))` == 8)
subset(data, data$`levels(as.factor(mle$legend))` == 8)
subset(data, data$`levels(as.factor(mle$legend))` == 8)
subset(data, data$`levels(as.factor(mle$legend))` == 12)
subset(mle, mle$legend == 8)
subset(mle, legend == 8)
length(subset(mle, legend == 8))
nrow(subset(mle, legend == 8))
data$cnt = nrow(subset(mle, legend == 8))
for (i in 4:16) {
data[2, i-3] = nrow(subset(mle, legend == 8))
}
data = as.data.frame(levels(as.factor(mle$legend)))
for (i in 4:16) {
data[i-3, 2] = nrow(subset(mle, legend == 8))
}
data[i-3, 2] = nrow(subset(mle, legend == i))
for (i in 4:16) {
data[i-3, 2] = nrow(subset(mle, legend == i))
}
ggplot(data, aes(data$`levels(as.factor(mle$legend))`, data$V2)) +
geom_point()
ggplot(data, aes(as.numeric(data$`levels(as.factor(mle$legend))`) , data$V2)) +
geom_point()
colnames(data) - c("legend", "cnt")
colnames(data) = c("legend", "cnt")
typeof(data$legend)
typeof(data$cnt)
ggplot(data, aes(legend, cnt)) +
geom_point()
ggplot(data, aes(as.numeric( as.character(legend)), cnt)) +
geom_point()
ggplot(data, aes(as.numeric( as.character(legend)), cnt)) +
geom_point()+
geom_smooth()
library("parallel", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detectCores()
cl = makeCluster(detectCores())
(cl = makeCluster(detectCores()))
library("parallel")
detectCores()
(cl = makeCluster(detectCores()))
parLapply(cl, corelist, function(x) paste("pid "Sys.getpid(), "runs on core ", x))
stopCluster(cl)
library("parallel")
detectCores()
cl = makeCluster(detectCores())
View(cl)
cl = makeCluster(detectCores())
parLapply(cl, corelist, function(x) paste("pid "Sys.getpid(), "runs on core ", x))
parLapply(cl, corelist, function(x) paste("pid ",Sys.getpid(), "runs on core ", x)))
corelist = 1:8
parLapply(cl, corelist, function(x) paste("pid ",Sys.getpid(), "runs on core ", x)))
parLapply(cl, corelist, function(x) paste("pid ",Sys.getpid(), "runs on core ", x))
stopCluster(cl)
typeof(corelist)
proc.time()
?foreach
proc.time()[]
system.time()
system.time(
for (i in 1:1000000)
{i^2}
)
system.time(
for (i in 1:1000000)
{i^2}
)
rep(seq(nrow(iris)),5)
repseq = rep(seq(nrow(iris)),5)
repseq = rep(seq(nrow(iris)),10^4)
irisBig = iris[repseq,]
View(irisBig)
cor(irisBig[1:4])
Rprof(file="rprof.out")
repseq = rep(seq(nrow(iris)),10^4)
irisBig = iris[repseq,]
cor(irisBig[1:4])
Rprof(NULL)
summaryRprof("rprof.out")
setwd("~/Documents/GitHub/CodeSpace/R_code")
install.packages("smfsb")
data(LVdata)
library("smfsb", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
data(LVdata)
rprior <- function() { c(runif(1, -3, 3), runif(1, -8, -2), runif(1, -4, 2)) }
dprior <- function(x, ...) { dunif(x[1], -3, 3, ...) +
dunif(x[2], -8, -2, ...) + dunif(x[3], -4, 2, ...) }
rmodel <- function(th) { simTs(c(50,100), 0, 30, 2, stepLVc, exp(th)) }
rperturb <- function(th){th + rnorm(3, 0, 0.5)}
dperturb <- function(thNew, thOld, ...){sum(dnorm(thNew, thOld, 0.5, ...))}
sumStats <- identity
ssd = sumStats(LVperfect)
distance <- function(s) {
diff = s - ssd
sqrt(sum(diff*diff))
}
rdist <- function(th) { distance(sumStats(rmodel(th))) }
out = abcSmc(5000, rprior, dprior, rdist, rperturb,
dperturb, verb=TRUE, steps=6, factor=5)
print(summary(out))
View(out)
out = abcSmc(20, rprior, dprior, rdist, rperturb,
dperturb, verb=TRUE, steps=6, factor=5)
print(summary(out))
install.packages("EasyABC")
library("EasyABC", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:EasyABC", unload=TRUE)
library("EasyABC", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
remove.packages("abc")
toy_model<-function(x){ 2 * x + 5 + rnorm(1,0,0.1) }
View(toy_model)
toy_prior=list(c("unif",0,1))
View(toy_prior)
sum_stat_obs=6.5
tolerance=c(1.5,0.5)
ABC_Beaumont<-ABC_sequential(method="Beaumont", model=toy_model, prior=toy_prior, nb_simul=20, summary_stat_target=sum_stat_obs, tolerance_tab=tolerance)
ABC_Beaumont
ABC_Beaumont
toy_model2<-function(x){ c( x[1] + x[2] + rnorm(1,0,0.1) , x[1] * x[2] + rnorm(1,0,0.1) ) }
toy_prior2=list(c("unif",0,1),c("normal",1,2))
sum_stat_obs2=c(1.5,0.5)
tolerance=c(1.5,0.5)
ABC_Beaumont<-ABC_sequential(method="Beaumont", model=toy_model2, prior=toy_prior2, nb_simul=20, summary_stat_target=sum_stat_obs2, tolerance_tab=tolerance)
ABC_Beaumont
setwd("~/OneDrive/PostgraduateProject/dataPreProcess")
library(ggplot2)
library(reshape2) # library for reshaping data (tall-narrow <-> short-wide)
setwd("~/OneDrive/PostgraduateProject/dataPreProcess")
library(readr)
pop3SSE <- read_csv("pop3SSE.csv", col_names = c("para", "attribute", "value"))
ggplot(data= pop3SSE[c(1:12),c(1:3)], aes(x=para, y=value))+
geom_bar(stat = "identity")+
theme_classic()+
xlab("parameter")+
labs(color = "L")+
ylab("SSE")
pop3outRaw <- read_csv("pop3outRaw.csv")
pop3out = melt(pop3outRaw, id.vars=c("id"))
ggplot(data = pop3out, aes(x = variable, y=value))+
geom_boxplot(fill = "lightblue", alpha = 0.24)+
geom_point(data= pop3SSE[c(37:48),c(1:3)], aes(x=para, y=value), color="blue")+
theme_classic()+
xlab("parameter")+
labs(color = "L")+
ylab("value")
